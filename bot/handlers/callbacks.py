from __future__ import annotations

import io
from aiogram import Router, types, F
from aiogram.enums import ChatType
from aiogram.fsm.context import FSMContext

from bot.services.di import Container
from bot.handlers.morning import MorningStates
from bot.handlers.evening import EveningStates
from bot.services.data_aggregator import DataAggregatorService
from bot.services.simple_presentation import SimplePresentationService
from bot.services.tempo_analytics import TempoAnalyticsService
from bot.utils.time_utils import (
    date_str_for_today,
    parse_date_or_today,
    start_end_of_week_today,
    start_end_of_month_today,
    start_end_of_quarter_today,
)
from bot.services.summary_builder import build_summary_text
from bot.keyboards.main import (
    get_admin_menu_keyboard,
    get_admin_summaries_keyboard,
    get_admin_ai_keyboard,
)
from bot.offices_config import get_office_by_chat_id, is_hq
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters.command import CommandObject


def split_long_message(text: str, max_length: int = 4000) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length —Å–∏–º–≤–æ–ª–æ–≤"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    lines = text.split('\n')
    for line in lines:
        # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º
        if len(line) > max_length:
            if current_part:
                parts.append(current_part.strip())
                current_part = ""
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
            while len(line) > max_length:
                parts.append(line[:max_length])
                line = line[max_length:]
            if line:
                current_part = line + '\n'
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
        elif len(current_part) + len(line) + 1 <= max_length:
            current_part += line + '\n'
        else:
            # –°—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
            if current_part:
                parts.append(current_part.strip())
            current_part = line + '\n'
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        parts.append(current_part.strip())
    
    return parts

callbacks_router = Router()


class AskAIStates(StatesGroup):
    waiting_question = State()


@callbacks_router.callback_query(F.data == "morning_report")
async def callback_morning_report(callback: types.CallbackQuery, state: FSMContext) -> None:
    if not callback.message or not callback.message.message_thread_id:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤ —Ç–µ–º–µ")
        return
    
    container = Container.get()
    manager = container.sheets.get_manager_by_topic(callback.message.chat.id, callback.message.message_thread_id)
    if not manager:
        await callback.answer("–¢–µ–º–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É")
        return
    
    await state.update_data(manager=manager)
    await state.set_state(MorningStates.waiting_calls_planned)
    await callback.message.answer("–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–≤–æ–Ω–æ–≤ (–ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è):")
    await callback.answer()


@callbacks_router.callback_query(F.data == "ask_ai")
async def callback_ask_ai(callback: types.CallbackQuery, state: FSMContext) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    await state.set_state(AskAIStates.waiting_question)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")
    await callback.answer()


@callbacks_router.message(AskAIStates.waiting_question)
async def handle_ai_question(message: types.Message, state: FSMContext) -> None:
    container = Container.get()
    from bot.services.yandex_gpt import YandexGPTService
    svc = YandexGPTService(container.settings)
    await message.answer("ü§ñ –î—É–º–∞—é...")
    answer = await svc.generate_answer(message.text or "")
    for part in split_long_message(answer):
        await message.answer(part)
    # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥.
    # –í—ã–π—Ç–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel.


@callbacks_router.message(F.text == "/cancel")
async def handle_ai_cancel(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–î–∏–∞–ª–æ–≥ —Å –ò–ò –∑–∞–≤–µ—Ä—à—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚Äò–°–ø—Ä–æ—Å–∏ —É –ò–ò‚Äô.")

@callbacks_router.callback_query(F.data == "evening_report")
async def callback_evening_report(callback: types.CallbackQuery, state: FSMContext) -> None:
    if not callback.message or not callback.message.message_thread_id:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤ —Ç–µ–º–µ")
        return
    
    container = Container.get()
    manager = container.sheets.get_manager_by_topic(callback.message.chat.id, callback.message.message_thread_id)
    if not manager:
        await callback.answer("–¢–µ–º–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É")
        return
    
    await state.update_data(manager=manager)
    await state.set_state(EveningStates.waiting_calls_success)
    await callback.message.answer("–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç. –ü–µ—Ä–µ–∑–≤–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ (—á–∏—Å–ª–æ):")
    await callback.answer()


@callbacks_router.callback_query(F.data == "summary_today")
async def callback_summary_today(callback: types.CallbackQuery) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    container = Container.get()
    day = date_str_for_today(container.settings)
    summary_text = build_summary_text(container.settings, container.sheets, day)
    
    summary_topic_id = container.sheets.get_summary_topic_id(callback.message.chat.id)
    if summary_topic_id and callback.message.chat.type == ChatType.SUPERGROUP:
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=summary_text,
            message_thread_id=summary_topic_id,
        )
        if callback.message.message_thread_id != summary_topic_id:
            await callback.message.answer("–°–≤–æ–¥–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ —Ç–µ–º–µ —Å–≤–æ–¥–æ–∫.")
    else:
        await callback.message.answer(summary_text)
    
    await callback.answer()


@callbacks_router.callback_query(F.data == "summary_week")
async def callback_summary_week(callback: types.CallbackQuery) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    # Answer early to avoid Telegram timeout on long operations
    try:
        await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å")
    except Exception:
        pass

    try:
        container = Container.get()
        start, end = start_end_of_week_today(container.settings)
        
        # Determine office filter for non-HQ chats
        office_filter = None
        if callback.message and callback.message.chat and not is_hq(callback.message.chat.id):
            office_filter = get_office_by_chat_id(callback.message.chat.id)
            if office_filter == "Unknown":
                office_filter = None
        
        text = build_summary_text(container.settings, container.sheets, day=start, start=start, end=end, office_filter=office_filter)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        parts = split_long_message(text)
        
        for i, part in enumerate(parts):
            if i == 0:
                await callback.message.answer(part)
            else:
                await callback.message.answer(f"üìÑ –ß–∞—Å—Ç—å {i + 1}:\n\n{part}")
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏: {str(e)}")


@callbacks_router.callback_query(F.data == "summary_month")
async def callback_summary_month(callback: types.CallbackQuery) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    # Answer early to avoid Telegram timeout on long operations
    try:
        await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å")
    except Exception:
        pass

    try:
        container = Container.get()
        start, end = start_end_of_month_today(container.settings)
        
        # Determine office filter for non-HQ chats
        office_filter = None
        if callback.message and callback.message.chat and not is_hq(callback.message.chat.id):
            office_filter = get_office_by_chat_id(callback.message.chat.id)
            if office_filter == "Unknown":
                office_filter = None
        
        text = build_summary_text(container.settings, container.sheets, day=start, start=start, end=end, office_filter=office_filter)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        parts = split_long_message(text)
        
        for i, part in enumerate(parts):
            if i == 0:
                await callback.message.answer(part)
            else:
                await callback.message.answer(f"üìÑ –ß–∞—Å—Ç—å {i + 1}:\n\n{part}")
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–π —Å–≤–æ–¥–∫–∏: {str(e)}")


@callbacks_router.callback_query(F.data == "summary_quarter")
async def callback_summary_quarter(callback: types.CallbackQuery) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    # Answer early to avoid Telegram timeout on long operations
    try:
        await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å")
    except Exception:
        pass

    try:
        container = Container.get()
        start, end = start_end_of_quarter_today(container.settings)
        
        # Determine office filter for non-HQ chats
        office_filter = None
        if callback.message and callback.message.chat and not is_hq(callback.message.chat.id):
            office_filter = get_office_by_chat_id(callback.message.chat.id)
            if office_filter == "Unknown":
                office_filter = None
        
        text = build_summary_text(container.settings, container.sheets, day=start, start=start, end=end, office_filter=office_filter)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        parts = split_long_message(text)
        
        for i, part in enumerate(parts):
            if i == 0:
                await callback.message.answer(part)
            else:
                await callback.message.answer(f"üìÑ –ß–∞—Å—Ç—å {i + 1}:\n\n{part}")
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏: {str(e)}")


@callbacks_router.callback_query(F.data == "summary_date")
async def callback_summary_date(callback: types.CallbackQuery) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    await callback.message.answer(
        "–î–ª—è —Å–≤–æ–¥–∫–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/summary YYYY-MM-DD</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/summary 2024-01-15</code>"
    )
    await callback.answer()


@callbacks_router.callback_query(F.data == "setup_topic")
async def callback_setup_topic(callback: types.CallbackQuery) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    await callback.message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º:\n\n"
        "<b>–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–µ–º—ã –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:</b>\n"
        "<code>/bind_manager –§–ò–û</code>\n\n"
        "<b>–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º—ã —Å–≤–æ–¥–∫–∏:</b>\n"
        "<code>/set_summary_topic</code>"
    )
    await callback.answer()


@callbacks_router.callback_query(F.data == "admin_section_summaries")
async def callback_admin_section_summaries(callback: types.CallbackQuery) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    await callback.message.edit_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Üí –°–≤–æ–¥–∫–∏:", reply_markup=get_admin_summaries_keyboard())
    await callback.answer()


@callbacks_router.callback_query(F.data == "admin_section_ai")
async def callback_admin_section_ai(callback: types.CallbackQuery) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    await callback.message.edit_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Üí AI:", reply_markup=get_admin_ai_keyboard())
    await callback.answer()


@callbacks_router.callback_query(F.data == "admin_back")
async def callback_admin_back(callback: types.CallbackQuery) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    await callback.message.edit_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_menu_keyboard())
    await callback.answer()

@callbacks_router.callback_query(F.data == "summary_period")
async def callback_summary_period(callback: types.CallbackQuery) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    await callback.message.answer(
        "–°–≤–æ–¥–∫–∞ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥:\n"
        "<code>/summary_range YYYY-MM-DD YYYY-MM-DD</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/summary_range 2025-08-01 2025-08-14</code>"
    )
    await callback.answer()


@callbacks_router.callback_query(F.data.in_({"admin_remind_morning", "admin_remind_evening"}))
async def callback_admin_reminders(callback: types.CallbackQuery) -> None:
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Ñ–∏—Å–Ω—ã—Ö —á–∞—Ç–∞—Ö (–Ω–µ HQ)
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    from bot.offices_config import is_hq
    if is_hq(callback.message.chat.id):
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ—Ñ–∏—Å–Ω—ã—Ö —á–∞—Ç–∞—Ö", show_alert=False)
        return
    container = Container.get()
    chat_id = callback.message.chat.id
    mode = "morning" if callback.data == "admin_remind_morning" else "evening"
    from bot.keyboards.main import get_main_menu_keyboard
    sent = 0
    for binding in container.sheets._bindings.get_all_records():
        bind_chat = str(binding.get("chat_id", "")).strip()
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –±–µ–∑ chat_id: —Å—á–∏—Ç–∞–µ–º –∏—Ö —Ç–µ–∫—É—â–∏–º —á–∞—Ç–æ–º
        if bind_chat and bind_chat != str(chat_id):
            continue
        topic_id_raw = str(binding.get("topic_id", "")).strip()
        if not topic_id_raw.isdigit():
            continue
        topic_id = int(topic_id_raw)
        manager = binding.get("manager")
        if not (topic_id and manager):
            continue
        text = (
            f"üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è <b>{manager}</b>\n–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á–µ—Ç!"
            if mode == "morning"
            else f"üåÜ –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è <b>{manager}</b>\n–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç!"
        )
        try:
            await callback.bot.send_message(
                chat_id,
                text,
                message_thread_id=topic_id,
                reply_markup=get_main_menu_keyboard(),
            )
            sent += 1
        except Exception:
            continue
    await callback.message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {sent} ({mode}).")
    await callback.answer()


@callbacks_router.callback_query(F.data.in_({"admin_remind_all_morning", "admin_remind_all_evening"}))
async def callback_admin_reminders_all(callback: types.CallbackQuery) -> None:
    # –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ HQ: —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –æ—Ñ–∏—Å–∞–º
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    from bot.offices_config import is_hq
    if not is_hq(callback.message.chat.id):
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ HQ", show_alert=False)
        return
    container = Container.get()
    mode = "morning" if callback.data == "admin_remind_all_morning" else "evening"
    from bot.keyboards.main import get_main_menu_keyboard
    sent = 0
    total = 0
    all_chat_ids = container.sheets.get_all_group_chat_ids()
    for chat_id in all_chat_ids:
        if is_hq(chat_id):
            continue
        for binding in container.sheets._bindings.get_all_records():
            if str(binding.get("chat_id")) != str(chat_id):
                continue
            topic_id_raw = str(binding.get("topic_id", "")).strip()
            if not topic_id_raw.isdigit():
                continue
            topic_id = int(topic_id_raw)
            manager = binding.get("manager")
            if not (topic_id and manager):
                continue
            text = (
                f"üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è <b>{manager}</b>\n–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á–µ—Ç!"
                if mode == "morning"
                else f"üåÜ –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è <b>{manager}</b>\n–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç!"
            )
            try:
                await callback.bot.send_message(
                    chat_id,
                    text,
                    message_thread_id=topic_id,
                    reply_markup=get_main_menu_keyboard(),
                )
                sent += 1
            except Exception:
                continue
            total += 1
    await callback.message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {sent}/{total} ({mode}).")
    await callback.answer()


@callbacks_router.callback_query(F.data == "presentation_week")
async def callback_presentation_week(callback: types.CallbackQuery) -> None:
    """Generate weekly AI presentation."""
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    # Answer early to avoid Telegram timeout on long operations
    try:
        await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å")
    except Exception:
        pass

    await callback.message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—É—é AI-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é...")
    
    try:
        container = Container.get()
        
        # Initialize services
        aggregator = DataAggregatorService(container.sheets)
        presentation_service = SimplePresentationService(container.settings)
        
        # Determine office filter for non-HQ chats
        office_filter = None
        if callback.message and callback.message.chat and not is_hq(callback.message.chat.id):
            office_filter = get_office_by_chat_id(callback.message.chat.id)
            if office_filter == "Unknown":
                office_filter = None
        
        # Get weekly data (with previous for comparison)
        period_data, previous_data, period_name, start_date, end_date, prev_start, prev_end = await aggregator.aggregate_weekly_data_with_previous(office_filter=office_filter)
        
        if not period_data:
            await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.")
            await callback.answer()
            return
        
        # Generate presentation
        pptx_bytes = await presentation_service.generate_presentation(
            period_data, previous_data, period_name, start_date, end_date, prev_start, prev_end, office_filter=office_filter
        )
        
        # Send as document
        document = types.BufferedInputFile(
            pptx_bytes,
            filename=f"AI_–û—Ç—á–µ—Ç_{period_name.replace(' ', '_')}.pptx"
        )
        
        await callback.message.answer_document(
            document,
            caption=f"üìä {period_name}\nü§ñ AI-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!"
        )
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}")
    


@callbacks_router.callback_query(F.data == "presentation_month")
async def callback_presentation_month(callback: types.CallbackQuery) -> None:
    """Generate monthly AI presentation."""
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    # Answer early to avoid Telegram timeout on long operations
    try:
        await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å")
    except Exception:
        pass

    await callback.message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ—Å—è—á–Ω—É—é AI-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é...")
    
    try:
        container = Container.get()
        
        # Initialize services
        aggregator = DataAggregatorService(container.sheets)
        presentation_service = SimplePresentationService(container.settings)
        
        # Determine office filter for non-HQ chats
        office_filter = None
        if callback.message and callback.message.chat and not is_hq(callback.message.chat.id):
            office_filter = get_office_by_chat_id(callback.message.chat.id)
            if office_filter == "Unknown":
                office_filter = None
        
        # Get monthly data (with previous for comparison)
        period_data, previous_data, period_name, start_date, end_date, prev_start, prev_end = await aggregator.aggregate_monthly_data_with_previous(office_filter=office_filter)
        
        if not period_data:
            await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
            await callback.answer()
            return
        
        # Generate presentation
        pptx_bytes = await presentation_service.generate_presentation(
            period_data, previous_data, period_name, start_date, end_date, prev_start, prev_end, office_filter=office_filter
        )
        
        # Send as document
        document = types.BufferedInputFile(
            pptx_bytes,
            filename=f"AI_–û—Ç—á–µ—Ç_{period_name.replace(' ', '_')}.pptx"
        )
        
        await callback.message.answer_document(
            document,
            caption=f"üìä {period_name}\nü§ñ AI-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!"
        )
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}")
    


@callbacks_router.callback_query(F.data == "presentation_quarter")
async def callback_presentation_quarter(callback: types.CallbackQuery) -> None:
    """Generate quarterly AI presentation."""
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    # Answer early to avoid Telegram timeout on long operations
    try:
        await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å")
    except Exception:
        pass

    await callback.message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—É—é AI-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é...")
    
    try:
        container = Container.get()
        
        # Initialize services
        aggregator = DataAggregatorService(container.sheets)
        presentation_service = SimplePresentationService(container.settings)
        
        # Determine office filter for non-HQ chats
        office_filter = None
        if callback.message and callback.message.chat and not is_hq(callback.message.chat.id):
            office_filter = get_office_by_chat_id(callback.message.chat.id)
            if office_filter == "Unknown":
                office_filter = None
        
        # Get quarterly data (with previous for comparison)
        period_data, previous_data, period_name, start_date, end_date, prev_start, prev_end = await aggregator.aggregate_quarterly_data_with_previous(office_filter=office_filter)
        
        if not period_data:
            await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –∫–≤–∞—Ä—Ç–∞–ª.")
            await callback.answer()
            return
        
        # Generate presentation
        pptx_bytes = await presentation_service.generate_presentation(
            period_data, previous_data, period_name, start_date, end_date, prev_start, prev_end, office_filter=office_filter
        )
        
        # Send as document
        document = types.BufferedInputFile(
            pptx_bytes,
            filename=f"AI_–û—Ç—á–µ—Ç_{period_name.replace(' ', '_')}.pptx"
        )
        
        await callback.message.answer_document(
            document,
            caption=f"üìä {period_name}\nü§ñ AI-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!"
        )
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}")
    


@callbacks_router.callback_query(F.data == "presentation_period")
async def callback_presentation_period(callback: types.CallbackQuery) -> None:
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    await callback.message.answer(
        "–£–∫–∞–∂–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/presentation_range YYYY-MM-DD YYYY-MM-DD</code>\n\n"
        "–ò–ª–∏ —Å—Ä–∞–≤–Ω–∏ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞:\n"
        "<code>/presentation_compare YYYY-MM-DD YYYY-MM-DD YYYY-MM-DD YYYY-MM-DD</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/presentation_compare 2025-08-01 2025-08-07 2025-09-01 2025-09-07</code>"
    )
    await callback.answer()


@callbacks_router.callback_query(F.data == "tempo_check")
async def callback_tempo_check(callback: types.CallbackQuery) -> None:
    """Check managers falling behind tempo."""
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    # Answer early to avoid Telegram timeout on long operations
    try:
        await callback.answer("–ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—Å—è")
    except Exception:
        pass

    await callback.message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–º–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤...")
    
    try:
        container = Container.get()
        
        # Initialize tempo analytics
        tempo_service = TempoAnalyticsService(container.sheets)
        
        # Get tempo alerts
        alerts = await tempo_service.analyze_monthly_tempo()
        
        if not alerts:
            await callback.message.answer("‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ä–∞–º–∫–∞—Ö –ø–ª–∞–Ω–∞!")
            await callback.answer()
            return
        
        # Format alerts
        response = "‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä—ã, –æ—Ç—Å—Ç–∞—é—â–∏–µ –æ—Ç –ø–ª–∞–Ω–∞:\n\n"
        
        critical_alerts = [a for a in alerts if a.alert_level == "critical"]
        warning_alerts = [a for a in alerts if a.alert_level == "warning"]
        
        if critical_alerts:
            response += "üî¥ –ö–†–ò–¢–ò–ß–ù–û:\n"
            for alert in critical_alerts:
                response += f"{alert.message}\n\n"
        
        if warning_alerts:
            response += "üü° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:\n"
            for alert in warning_alerts:
                response += f"{alert.message}\n\n"
        
        await callback.message.answer(response)
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–º–ø–∞: {str(e)}")
    
