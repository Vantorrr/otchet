from __future__ import annotations

import io
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.filters.command import CommandObject
from aiogram.enums import ChatType

from bot.config import Settings
from bot.services.di import Container
from bot.services.data_aggregator import DataAggregatorService
from bot.services.presentation import PresentationService
from bot.services.tempo_analytics import TempoAnalyticsService
from bot.keyboards.main import get_main_menu_keyboard, get_admin_menu_keyboard

admin_router = Router()


@admin_router.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    # Initialize DI container when bot receives /start in any chat
    settings = Settings.load()
    Container.init(settings)
    # Remember group chat id for scheduled jobs
    if message.chat.id and message.chat.type == ChatType.SUPERGROUP:
        try:
            Container.get().sheets.set_group_chat_id(message.chat.id)
        except Exception:
            pass
    await message.reply("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bind_manager –∏ /set_summary_topic –≤ –Ω—É–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö.")


@admin_router.message(Command("bind_manager"), F.chat.type == ChatType.SUPERGROUP)
async def cmd_bind_manager(message: types.Message) -> None:
    if not message.message_thread_id:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞: /bind_manager <–§–ò–û>")
        return
    manager = args[1].strip()
    container = Container.get()
    container.sheets.set_manager_binding(message.message_thread_id, manager)
    await message.reply(f"–¢–µ–º–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {manager}")


@admin_router.message(Command("set_summary_topic"), F.chat.type == ChatType.SUPERGROUP)
async def cmd_set_summary_topic(message: types.Message) -> None:
    if not message.message_thread_id:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã.")
        return
    container = Container.get()
    container.sheets.set_summary_topic(message.message_thread_id)
    await message.reply("–≠—Ç–∞ —Ç–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏.")


@admin_router.message(Command("menu"), F.chat.type == ChatType.SUPERGROUP)
async def cmd_menu(message: types.Message) -> None:
    if not message.message_thread_id:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã.")
        return
    
    container = Container.get()
    manager = container.sheets.get_manager_by_topic(message.message_thread_id)
    summary_topic_id = container.sheets.get_summary_topic_id()
    
    if manager:
        # –¢–µ–º–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await message.reply(
            f"–ú–µ–Ω—é –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ <b>{manager}</b>:",
            reply_markup=get_main_menu_keyboard()
        )
    elif message.message_thread_id == summary_topic_id:
        # –¢–µ–º–∞ —Å–≤–æ–¥–∫–∏
        await message.reply(
            "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_menu_keyboard()
        )
    else:
        # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞
        await message.reply(
            "–≠—Ç–∞ —Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ /bind_manager –§–ò–û - –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É\n"
            "‚Ä¢ /set_summary_topic - –¥–ª—è —Ç–µ–º—ã —Å–≤–æ–¥–∫–∏"
        )


@admin_router.message(Command("purge_manager"))
async def cmd_purge_manager(message: types.Message, command: CommandObject) -> None:
    # Prefer parsing via CommandObject to be robust with mentions: /purge_manager@bot args
    argline = (command.args or "").strip()
    if not argline:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞: /purge_manager <–§–ò–û> [YYYY-MM-DD]")
        return
    tail = argline.split()
    manager = tail[0]
    date = tail[1] if len(tail) > 1 else None
    container = Container.get()
    deleted_reports = container.sheets.delete_reports_by_manager(manager, date)
    deleted_bindings = container.sheets.delete_bindings_by_manager(manager)
    await message.reply(
        f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: Reports={deleted_reports}, Bindings={deleted_bindings} –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager}"
    )

# Fallback in case Command filter misses due to client quirks (e.g. slash with extra spaces)
@admin_router.message(F.text.regexp(r"^/purge_manager(?:@\w+)?(\s+.*)?$"))
async def cmd_purge_manager_fallback(message: types.Message) -> None:
    parts = message.text.split(maxsplit=1) if message.text else []
    if len(parts) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞: /purge_manager <–§–ò–û> [YYYY-MM-DD]")
        return
    tail = parts[1].split()
    manager = tail[0]
    date = tail[1] if len(tail) > 1 else None
    container = Container.get()
    deleted_reports = container.sheets.delete_reports_by_manager(manager, date)
    deleted_bindings = container.sheets.delete_bindings_by_manager(manager)
    await message.reply(
        f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: Reports={deleted_reports}, Bindings={deleted_bindings} –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager}"
    )


@admin_router.message(Command("generate_weekly_presentation"))
async def cmd_generate_weekly_presentation(message: types.Message) -> None:
    """Generate weekly presentation with AI analysis."""
    await message.reply("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é...")
    
    try:
        container = Container.get()
        
        # Initialize services
        aggregator = DataAggregatorService(container.sheets)
        presentation_service = PresentationService(container.settings)
        
        # Get weekly data
        period_data, period_name, start_date, end_date = await aggregator.aggregate_weekly_data()
        
        if not period_data:
            await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.")
            return
        
        # Generate presentation
        pptx_bytes = await presentation_service.generate_presentation(
            period_data, period_name, start_date, end_date
        )
        
        # Send as document
        document = types.BufferedInputFile(
            pptx_bytes,
            filename=f"–û—Ç—á–µ—Ç_{period_name.replace(' ', '_')}.pptx"
        )
        
        await message.reply_document(
            document,
            caption=f"üìä {period_name}\nü§ñ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º –≥–æ—Ç–æ–≤–∞!"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}")


@admin_router.message(Command("generate_monthly_presentation"))
async def cmd_generate_monthly_presentation(message: types.Message) -> None:
    """Generate monthly presentation with AI analysis."""
    await message.reply("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ—Å—è—á–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é...")
    
    try:
        container = Container.get()
        
        # Initialize services
        aggregator = DataAggregatorService(container.sheets)
        presentation_service = PresentationService(container.settings)
        
        # Get monthly data
        period_data, period_name, start_date, end_date = await aggregator.aggregate_monthly_data()
        
        if not period_data:
            await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
            return
        
        # Generate presentation
        pptx_bytes = await presentation_service.generate_presentation(
            period_data, period_name, start_date, end_date
        )
        
        # Send as document
        document = types.BufferedInputFile(
            pptx_bytes,
            filename=f"–û—Ç—á–µ—Ç_{period_name.replace(' ', '_')}.pptx"
        )
        
        await message.reply_document(
            document,
            caption=f"üìä {period_name}\nü§ñ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º –≥–æ—Ç–æ–≤–∞!"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}")


@admin_router.message(Command("generate_quarterly_presentation"))
async def cmd_generate_quarterly_presentation(message: types.Message) -> None:
    """Generate quarterly presentation with AI analysis."""
    await message.reply("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é...")
    
    try:
        container = Container.get()
        
        # Initialize services
        aggregator = DataAggregatorService(container.sheets)
        presentation_service = PresentationService(container.settings)
        
        # Get quarterly data
        period_data, period_name, start_date, end_date = await aggregator.aggregate_quarterly_data()
        
        if not period_data:
            await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –∫–≤–∞—Ä—Ç–∞–ª.")
            return
        
        # Generate presentation
        pptx_bytes = await presentation_service.generate_presentation(
            period_data, period_name, start_date, end_date
        )
        
        # Send as document
        document = types.BufferedInputFile(
            pptx_bytes,
            filename=f"–û—Ç—á–µ—Ç_{period_name.replace(' ', '_')}.pptx"
        )
        
        await message.reply_document(
            document,
            caption=f"üìä {period_name}\nü§ñ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º –≥–æ—Ç–æ–≤–∞!"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}")


@admin_router.message(Command("tempo_check"))
async def cmd_tempo_check(message: types.Message) -> None:
    """Check managers falling behind tempo."""
    await message.reply("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–º–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤...")
    
    try:
        container = Container.get()
        
        # Initialize tempo analytics
        tempo_service = TempoAnalyticsService(container.sheets)
        
        # Get tempo alerts
        alerts = await tempo_service.analyze_monthly_tempo()
        
        if not alerts:
            await message.reply("‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ä–∞–º–∫–∞—Ö –ø–ª–∞–Ω–∞!")
            return
        
        # Format alerts
        response = "‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä—ã, –æ—Ç—Å—Ç–∞—é—â–∏–µ –æ—Ç –ø–ª–∞–Ω–∞:\n\n"
        
        critical_alerts = [a for a in alerts if a.alert_level == "critical"]
        warning_alerts = [a for a in alerts if a.alert_level == "warning"]
        
        if critical_alerts:
            response += "üî¥ –ö–†–ò–¢–ò–ß–ù–û:\n"
            for alert in critical_alerts:
                response += f"{alert.message}\n\n"
        
        if warning_alerts:
            response += "üü° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:\n"
            for alert in warning_alerts:
                response += f"{alert.message}\n\n"
        
        await message.reply(response)
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–º–ø–∞: {str(e)}")
