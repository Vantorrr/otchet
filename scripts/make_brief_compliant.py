#!/usr/bin/env python3
"""–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –°–¢–†–û–ì–û –ø–æ –±—Ä–∏—Ñ—É –∫–ª–∏–µ–Ω—Ç–∞ (9 —Å–ª–∞–π–¥–æ–≤, —Ç–æ—á–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞, —Ç–∞–±–ª–∏—Ü—ã, –¥–∏–∞–≥—Ä–∞–º–º—ã)."""
from __future__ import annotations

import os
import sys
from datetime import datetime

from dotenv import load_dotenv

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from bot.config import Settings
from bot.services.di import Container
from bot.services.data_aggregator import DataAggregatorService
from bot.services.presentation import PresentationService
from bot.services.yandex_gpt import YandexGPTService

from pptx import Presentation
from pptx.util import Inches, Pt, Cm
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor
from pptx.enum.shapes import MSO_SHAPE
from pptx.oxml.xmlchemy import OxmlElement
import plotly.graph_objects as go


# === –£–¢–ò–õ–ò–¢–´ ===
def hex_to_rgb(hex_color: str) -> RGBColor:
    hex_color = hex_color.lstrip('#')
    r, g, b = int(hex_color[0:2], 16), int(hex_color[2:4], 16), int(hex_color[4:6], 16)
    return RGBColor(r, g, b)

PRIMARY = "#2E7D32"
ALERT = "#C62828"
ACCENT2 = "#FF8A65"
TEXT_MAIN = "#222222"
TEXT_MUTED = "#6B6B6B"
CARD_BG = "#F5F5F5"
SLIDE_BG = "#FFFFFF"

def add_logo(slide, prs, logo_path):
    """–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É."""
    # Check multiple possible paths
    possible_paths = [
        logo_path,
        os.path.join(os.path.dirname(__file__), "..", "–õ–æ–≥–æ—Ç–∏–ø.png"),
        "–õ–æ–≥–æ—Ç–∏–ø.png",
        "assets/logo.png"
    ]
    
    for path in possible_paths:
        if path and os.path.exists(path):
            try:
                slide.shapes.add_picture(
                    path, 
                    prs.slide_width - Inches(2.2), 
                    Inches(0.2), 
                    height=Inches(0.75)
                )
                return
            except Exception as e:
                continue

def create_donut_chart(totals, path="donut.png"):
    labels = ['–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–≤–æ–Ω–∫–∏', '–ó–∞—è–≤–∫–∏ —à—Ç', '–ó–∞—è–≤–∫–∏ –º–ª–Ω', '–í—ã–¥–∞–Ω–æ']
    values = [totals['calls_fact'], totals['leads_units_fact'], totals['leads_volume_fact']*10, totals['issued_volume']*10]
    colors = [PRIMARY, ACCENT2, '#81C784', '#AED581']
    fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.5, marker_colors=colors)])
    fig.update_layout(
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", title_font_size=14, title_font_family="Roboto",
        font=dict(family="Roboto", size=11), showlegend=True, width=400, height=350,
        paper_bgcolor='rgba(0,0,0,0)'
    )
    fig.write_image(path)
    return path

def create_comparison_bars(prev, cur, path="compare_bars.png"):
    categories = ['–ó–≤–æ–Ω–∫–∏', '–ó–∞—è–≤–∫–∏ —à—Ç', '–ó–∞—è–≤–∫–∏ –º–ª–Ω']
    prev_vals = [prev['calls_fact'], prev['leads_units_fact'], prev['leads_volume_fact']]
    cur_vals = [cur['calls_fact'], cur['leads_units_fact'], cur['leads_volume_fact']]
    
    fig = go.Figure()
    fig.add_trace(go.Bar(name='–ü—Ä–µ–¥—ã–¥—É—â–∏–π', x=categories, y=prev_vals, marker_color=ACCENT2))
    fig.add_trace(go.Bar(name='–¢–µ–∫—É—â–∏–π', x=categories, y=cur_vals, marker_color=PRIMARY))
    fig.update_layout(barmode='group', title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤", title_font_family="Roboto",
                      font=dict(family="Roboto", size=11), width=700, height=350, paper_bgcolor='rgba(0,0,0,0)')
    fig.write_image(path)
    return path

def create_line_dynamics(daily_data, path="line_dynamics.png"):
    dates = [d['date'] for d in daily_data]
    plan = [d['leads_volume_plan'] for d in daily_data]
    fact = [d['leads_volume_fact'] for d in daily_data]
    issued = [d['issued_volume'] for d in daily_data]
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=dates, y=plan, mode='lines+markers', name='–ü–ª–∞–Ω', line=dict(color=PRIMARY, width=2)))
    fig.add_trace(go.Scatter(x=dates, y=fact, mode='lines+markers', name='–§–∞–∫—Ç', line=dict(color=ACCENT2, width=2)))
    fig.add_trace(go.Scatter(x=dates, y=issued, mode='lines+markers', name='–í—ã–¥–∞–Ω–æ', line=dict(color=ALERT, width=2)))
    
    fig.update_layout(title="–î–∏–Ω–∞–º–∏–∫–∞ (–º–ª–Ω)", title_font_family="Roboto", xaxis_title="–î–Ω–∏", yaxis_title="–ú–ª–Ω ‚ÇΩ",
                      font=dict(family="Roboto", size=11), width=700, height=350, paper_bgcolor='rgba(0,0,0,0)')
    fig.write_image(path)
    return path


def main():
    load_dotenv()
    os.environ.setdefault("GOOGLE_APPLICATION_CREDENTIALS", "service_account.json")
    os.environ.setdefault("BOT_TOKEN", "dummy")
    os.environ.setdefault("OFFICE_NAME", "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏")

    settings = Settings.load()
    Container.init(settings)

    start = datetime.strptime("2025-09-01", "%Y-%m-%d").date()
    end = datetime.strptime("2025-09-07", "%Y-%m-%d").date()
    print("üî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –°–¢–†–û–ì–û –ü–û –ë–†–ò–§–£ (9 —Å–ª–∞–π–¥–æ–≤)...")

    aggregator = DataAggregatorService(Container.get().sheets)
    period_data, prev_data, period_name, s1, e1, s2, e2 = __import__("asyncio").get_event_loop().run_until_complete(
        aggregator.aggregate_custom_with_previous(start, end)
    )
    if not period_data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return 1

    prs_service = PresentationService(settings)
    totals = prs_service._calculate_totals(period_data)
    prev_totals = prs_service._calculate_totals(prev_data) if prev_data else {}
    
    daily = __import__("asyncio").get_event_loop().run_until_complete(aggregator.get_daily_series(start, end))
    
    prs = Presentation()
    prs.slide_width = Inches(13.33)
    prs.slide_height = Inches(7.5)
    logo = getattr(settings, 'pptx_logo_path', '')
    margin = Cm(1.5)
    
    # === 1. –¢–ò–¢–£–õ–¨–ù–´–ô ===
    print("  –°–ª–∞–π–¥ 1/9: –¢–∏—Ç—É–ª—å–Ω—ã–π...")
    s1 = prs.slides.add_slide(prs.slide_layouts[6])
    bg1 = s1.shapes.add_shape(MSO_SHAPE.RECTANGLE, 0, 0, prs.slide_width, prs.slide_height)
    bg1.fill.solid()
    bg1.fill.fore_color.rgb = hex_to_rgb(SLIDE_BG)
    bg1.line.fill.background()
    
    add_logo(s1, prs, logo)
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ–∏—Å–∞ —Å–≤–µ—Ä—Ö—É
    office = s1.shapes.add_textbox(margin, Inches(0.5), Inches(8), Inches(0.5))
    office.text_frame.text = getattr(settings, 'office_name', '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏').upper()
    office.text_frame.paragraphs[0].font.name = "Roboto"
    office.text_frame.paragraphs[0].font.size = Pt(16)
    office.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(TEXT_MUTED)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = s1.shapes.add_textbox(margin, Inches(2.5), prs.slide_width - 2*margin, Inches(1.5))
    title.text_frame.text = "–û–¢–ß–Å–¢ –ü–û –ü–†–û–î–ê–ñ–ê–ú"
    title.text_frame.paragraphs[0].font.name = "Roboto"
    title.text_frame.paragraphs[0].font.size = Pt(44)
    title.text_frame.paragraphs[0].font.bold = True
    title.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(PRIMARY)
    title.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    # –ü–µ—Ä–∏–æ–¥
    period = s1.shapes.add_textbox(margin, Inches(4.2), prs.slide_width - 2*margin, Inches(0.7))
    period.text_frame.text = f"{period_name}"
    period.text_frame.paragraphs[0].font.name = "Roboto"
    period.text_frame.paragraphs[0].font.size = Pt(20)
    period.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(TEXT_MAIN)
    period.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    # –î–∞—Ç—ã
    dates = s1.shapes.add_textbox(margin, Inches(5), prs.slide_width - 2*margin, Inches(0.5))
    dates.text_frame.text = f"{start.strftime('%d.%m.%Y')} ‚Äî {end.strftime('%d.%m.%Y')}"
    dates.text_frame.paragraphs[0].font.name = "Roboto"
    dates.text_frame.paragraphs[0].font.size = Pt(16)
    dates.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(TEXT_MUTED)
    dates.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    # === 2. –°–í–û–î–ö–ê (KEY METRICS) ===
    print("  –°–ª–∞–π–¥ 2/9: –°–≤–æ–¥–∫–∞ –∫–æ–º–∞–Ω–¥—ã...")
    s2 = prs.slides.add_slide(prs.slide_layouts[6])
    bg2 = s2.shapes.add_shape(MSO_SHAPE.RECTANGLE, 0, 0, prs.slide_width, prs.slide_height)
    bg2.fill.solid()
    bg2.fill.fore_color.rgb = hex_to_rgb(SLIDE_BG)
    bg2.line.fill.background()
    add_logo(s2, prs, logo)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    h2 = s2.shapes.add_textbox(margin, Inches(0.5), prs.slide_width - 2*margin, Inches(0.6))
    h2.text_frame.text = "–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ–º–∞–Ω–¥—ã"
    h2.text_frame.paragraphs[0].font.name = "Roboto"
    h2.text_frame.paragraphs[0].font.size = Pt(28)
    h2.text_frame.paragraphs[0].font.bold = True
    h2.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(PRIMARY)
    h2.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –∑–µ–±—Ä–æ–π
    rows, cols = 7, 4
    tbl = s2.shapes.add_table(rows, cols, margin, Inches(1.3), Inches(11.33), Inches(4.5)).table
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ü–ª–∞–Ω", "–§–∞–∫—Ç", "–ö–æ–Ω–≤ (%)"]
    for c, h in enumerate(headers):
        cell = tbl.cell(0, c)
        cell.text = h
        cell.fill.solid()
        cell.fill.fore_color.rgb = hex_to_rgb(PRIMARY)
        for p in cell.text_frame.paragraphs:
            p.font.name = "Roboto"
            p.font.size = Pt(12)
            p.font.bold = True
            p.font.color.rgb = RGBColor(255, 255, 255)
            p.alignment = PP_ALIGN.CENTER
    
    # –î–∞–Ω–Ω—ã–µ
    data_rows = [
        ("–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–≤–æ–Ω–∫–∏", f"{int(totals['calls_plan']):,}".replace(",", " "), f"{int(totals['calls_fact']):,}".replace(",", " "), f"{totals['calls_percentage']:.1f}%".replace(".", ",")),
        ("–ó–∞—è–≤–∫–∏, —à—Ç", f"{int(totals['leads_units_plan']):,}".replace(",", " "), f"{int(totals['leads_units_fact']):,}".replace(",", " "), f"{totals['leads_units_percentage']:.1f}%".replace(".", ",")),
        ("–ó–∞—è–≤–∫–∏, –º–ª–Ω", f"{totals['leads_volume_plan']:.1f}".replace(".", ","), f"{totals['leads_volume_fact']:.1f}".replace(".", ","), f"{totals['leads_volume_percentage']:.1f}%".replace(".", ",")),
        ("–û–¥–æ–±—Ä–µ–Ω–æ, –º–ª–Ω", "‚Äî", f"{totals['approved_volume']:.1f}".replace(".", ","), "‚Äî"),
        ("–í—ã–¥–∞–Ω–æ, –º–ª–Ω", "‚Äî", f"{totals['issued_volume']:.1f}".replace(".", ","), "‚Äî"),
        ("–ù–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏", "‚Äî", f"{int(totals['new_calls']):,}".replace(",", " "), "‚Äî"),
    ]
    
    for r, (name, plan, fact, conv) in enumerate(data_rows, start=1):
        for c, val in enumerate([name, plan, fact, conv]):
            cell = tbl.cell(r, c)
            cell.text = val
            # –ó–µ–±—Ä–∞
            if r % 2 == 0:
                cell.fill.solid()
                cell.fill.fore_color.rgb = hex_to_rgb(CARD_BG)
            for p in cell.text_frame.paragraphs:
                p.font.name = "Roboto"
                p.font.size = Pt(12)
                p.font.color.rgb = hex_to_rgb(TEXT_MAIN)
                p.alignment = PP_ALIGN.CENTER if c > 0 else PP_ALIGN.LEFT
    
    # Donut –ù–ò–ñ–ï —Ç–∞–±–ª–∏—Ü—ã (–æ—Ç–¥–µ–ª—å–Ω–æ)
    donut_path = create_donut_chart(totals, "donut_metrics.png")
    if os.path.exists(donut_path):
        s2.shapes.add_picture(donut_path, Inches(4), Inches(6.2), width=Inches(5), height=Inches(1.2))
    
    # === 3. AI‚Äë–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö–û–ú–ê–ù–î–´ ===
    print("  –°–ª–∞–π–¥ 3/9: AI-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ...")
    s3 = prs.slides.add_slide(prs.slide_layouts[6])
    bg3 = s3.shapes.add_shape(MSO_SHAPE.RECTANGLE, 0, 0, prs.slide_width, prs.slide_height)
    bg3.fill.solid()
    bg3.fill.fore_color.rgb = hex_to_rgb(SLIDE_BG)
    bg3.line.fill.background()
    add_logo(s3, prs, logo)
    
    h3 = s3.shapes.add_textbox(margin, Inches(0.5), prs.slide_width - 2*margin, Inches(0.6))
    h3.text_frame.text = "–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    h3.text_frame.paragraphs[0].font.name = "Roboto"
    h3.text_frame.paragraphs[0].font.size = Pt(28)
    h3.text_frame.paragraphs[0].font.bold = True
    h3.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(PRIMARY)
    h3.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    # AI —Ç–µ–∫—Å—Ç
    ai_comment = __import__("asyncio").get_event_loop().run_until_complete(
        YandexGPTService(settings).generate_team_comment(totals, period_name)
    )
    ai_box = s3.shapes.add_textbox(margin, Inches(1.5), prs.slide_width - 2*margin, Inches(5))
    ai_box.text_frame.text = ai_comment
    ai_box.text_frame.word_wrap = True
    for p in ai_box.text_frame.paragraphs:
        p.font.name = "Roboto"
        p.font.size = Pt(16)
        p.font.color.rgb = hex_to_rgb(TEXT_MAIN)
        p.line_spacing = 1.3
        p.alignment = PP_ALIGN.LEFT
    
    # === 4. –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú (3 –ì–†–ê–§–ò–ö–ê) ===
    print("  –°–ª–∞–π–¥ 4/9: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤...")
    s4 = prs.slides.add_slide(prs.slide_layouts[6])
    bg4 = s4.shapes.add_shape(MSO_SHAPE.RECTANGLE, 0, 0, prs.slide_width, prs.slide_height)
    bg4.fill.solid()
    bg4.fill.fore_color.rgb = hex_to_rgb(SLIDE_BG)
    bg4.line.fill.background()
    add_logo(s4, prs, logo)
    
    h4 = s4.shapes.add_textbox(margin, Inches(0.5), prs.slide_width - 2*margin, Inches(0.6))
    h4.text_frame.text = "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º"
    h4.text_frame.paragraphs[0].font.name = "Roboto"
    h4.text_frame.paragraphs[0].font.size = Pt(28)
    h4.text_frame.paragraphs[0].font.bold = True
    h4.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(PRIMARY)
    h4.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    if prev_totals:
        compare_path = create_comparison_bars(prev_totals, totals, "comparison_bars.png")
        if os.path.exists(compare_path):
            s4.shapes.add_picture(compare_path, Inches(1), Inches(1.5), width=Inches(5.5), height=Inches(3))
    
    line_path = create_line_dynamics(daily, "dynamics_line.png")
    if os.path.exists(line_path):
        s4.shapes.add_picture(line_path, Inches(7), Inches(1.5), width=Inches(5.5), height=Inches(3))
    
    # Donut changes
    if os.path.exists("donut_metrics.png"):
        s4.shapes.add_picture("donut_metrics.png", Inches(4), Inches(5), width=Inches(5), height=Inches(2))
    
    # === 5. –¢–û–ü-2 –ò –ê–ù–¢–ò–¢–û–ü-2 ===
    print("  –°–ª–∞–π–¥ 5/9: –†–µ–π—Ç–∏–Ω–≥...")
    s5 = prs.slides.add_slide(prs.slide_layouts[6])
    bg5 = s5.shapes.add_shape(MSO_SHAPE.RECTANGLE, 0, 0, prs.slide_width, prs.slide_height)
    bg5.fill.solid()
    bg5.fill.fore_color.rgb = hex_to_rgb(SLIDE_BG)
    bg5.line.fill.background()
    add_logo(s5, prs, logo)
    
    h5 = s5.shapes.add_textbox(margin, Inches(0.5), prs.slide_width - 2*margin, Inches(0.6))
    h5.text_frame.text = "–†–µ–π—Ç–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    h5.text_frame.paragraphs[0].font.name = "Roboto"
    h5.text_frame.paragraphs[0].font.size = Pt(28)
    h5.text_frame.paragraphs[0].font.bold = True
    h5.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(PRIMARY)
    h5.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    # Ranking
    scored = []
    for m in period_data.values():
        cp = (m.calls_fact/m.calls_plan*100) if m.calls_plan else 0
        vp = (m.leads_volume_fact/m.leads_volume_plan*100) if m.leads_volume_plan else 0
        scored.append((0.5*cp+0.5*vp, m.name))
    scored.sort(reverse=True)
    best = [n for _, n in scored[:2]]
    worst = [n for _, n in list(reversed(scored[-2:]))]
    
    # –¢–û–ü-2
    top_card = s5.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, margin, Inches(1.5), Inches(6), Inches(5))
    top_card.fill.solid()
    top_card.fill.fore_color.rgb = hex_to_rgb(PRIMARY)
    top_card.line.fill.background()
    
    top_t = s5.shapes.add_textbox(margin + Inches(0.5), Inches(2), Inches(5), Inches(0.5))
    top_t.text_frame.text = "üèÜ –õ–ò–î–ï–†–´ –ü–ï–†–ò–û–î–ê"
    top_t.text_frame.paragraphs[0].font.name = "Roboto"
    top_t.text_frame.paragraphs[0].font.size = Pt(22)
    top_t.text_frame.paragraphs[0].font.bold = True
    top_t.text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)
    
    for i, name in enumerate(best[:2]):
        nb = s5.shapes.add_textbox(margin + Inches(0.5), Inches(2.8 + i*1), Inches(5), Inches(0.8))
        nb.text_frame.text = f"{i+1}. {name}"
        nb.text_frame.paragraphs[0].font.name = "Roboto"
        nb.text_frame.paragraphs[0].font.size = Pt(18)
        nb.text_frame.paragraphs[0].font.bold = True
        nb.text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)
    
    # –ê–ù–¢–ò–¢–û–ü-2
    bot_card = s5.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, Inches(7), Inches(1.5), Inches(6), Inches(5))
    bot_card.fill.solid()
    bot_card.fill.fore_color.rgb = hex_to_rgb(ALERT)
    bot_card.line.fill.background()
    
    bot_t = s5.shapes.add_textbox(Inches(7.5), Inches(2), Inches(5), Inches(0.5))
    bot_t.text_frame.text = "‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
    bot_t.text_frame.paragraphs[0].font.name = "Roboto"
    bot_t.text_frame.paragraphs[0].font.size = Pt(22)
    bot_t.text_frame.paragraphs[0].font.bold = True
    bot_t.text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)
    
    for i, name in enumerate(worst[:2]):
        nb = s5.shapes.add_textbox(Inches(7.5), Inches(2.8 + i*1), Inches(5), Inches(0.8))
        nb.text_frame.text = f"{i+1}. {name}"
        nb.text_frame.paragraphs[0].font.name = "Roboto"
        nb.text_frame.paragraphs[0].font.size = Pt(18)
        nb.text_frame.paragraphs[0].font.bold = True
        nb.text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)
    
    # === 6. –û–ë–©–ê–Ø –¢–ê–ë–õ–ò–¶–ê –í–°–ï–• –ú–ï–ù–ï–î–ñ–ï–†–û–í ===
    print("  –°–ª–∞–π–¥ 6/9: –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
    s6 = prs.slides.add_slide(prs.slide_layouts[6])
    bg6 = s6.shapes.add_shape(MSO_SHAPE.RECTANGLE, 0, 0, prs.slide_width, prs.slide_height)
    bg6.fill.solid()
    bg6.fill.fore_color.rgb = hex_to_rgb(SLIDE_BG)
    bg6.line.fill.background()
    add_logo(s6, prs, logo)
    
    h6 = s6.shapes.add_textbox(margin, Inches(0.5), prs.slide_width - 2*margin, Inches(0.6))
    h6.text_frame.text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"
    h6.text_frame.paragraphs[0].font.name = "Roboto"
    h6.text_frame.paragraphs[0].font.size = Pt(28)
    h6.text_frame.paragraphs[0].font.bold = True
    h6.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(PRIMARY)
    h6.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    # –¢–∞–±–ª–∏—Ü–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    mgr_rows = len(period_data) + 1
    tbl6 = s6.shapes.add_table(mgr_rows, 5, margin, Inches(1.3), Inches(11.33), Inches(5.5)).table
    
    mgr_headers = ["–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ó–≤–æ–Ω–∫–∏", "–ó–∞—è–≤–∫–∏ —à—Ç", "–ó–∞—è–≤–∫–∏ –º–ª–Ω", "–í—ã–¥–∞–Ω–æ –º–ª–Ω"]
    for c, h in enumerate(mgr_headers):
        cell = tbl6.cell(0, c)
        cell.text = h
        cell.fill.solid()
        cell.fill.fore_color.rgb = hex_to_rgb(PRIMARY)
        for p in cell.text_frame.paragraphs:
            p.font.name = "Roboto"
            p.font.size = Pt(12)
            p.font.bold = True
            p.font.color.rgb = RGBColor(255, 255, 255)
            p.alignment = PP_ALIGN.CENTER
    
    for r, mgr in enumerate(period_data.values(), start=1):
        row_data = [
            mgr.name,
            f"{mgr.calls_fact}/{mgr.calls_plan}",
            f"{int(mgr.leads_units_fact):,}".replace(",", " "),
            f"{mgr.leads_volume_fact:.1f}".replace(".", ","),
            f"{mgr.issued_volume:.1f}".replace(".", ",")
        ]
        for c, val in enumerate(row_data):
            cell = tbl6.cell(r, c)
            cell.text = val
            if r % 2 == 0:
                cell.fill.solid()
                cell.fill.fore_color.rgb = hex_to_rgb(CARD_BG)
            for p in cell.text_frame.paragraphs:
                p.font.name = "Roboto"
                p.font.size = Pt(12)
                p.font.color.rgb = hex_to_rgb(TEXT_MAIN)
                p.alignment = PP_ALIGN.CENTER if c > 0 else PP_ALIGN.LEFT
    
    # === 7. –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –ö–ê–†–¢–û–ß–ö–ò –ú–ï–ù–ï–î–ñ–ï–†–û–í ===
    print("  –°–ª–∞–π–¥ 7/9: –ö–∞—Ä—Ç–æ—á–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
    s7 = prs.slides.add_slide(prs.slide_layouts[6])
    bg7 = s7.shapes.add_shape(MSO_SHAPE.RECTANGLE, 0, 0, prs.slide_width, prs.slide_height)
    bg7.fill.solid()
    bg7.fill.fore_color.rgb = hex_to_rgb(SLIDE_BG)
    bg7.line.fill.background()
    add_logo(s7, prs, logo)
    
    h7 = s7.shapes.add_textbox(margin, Inches(0.5), prs.slide_width - 2*margin, Inches(0.6))
    h7.text_frame.text = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"
    h7.text_frame.paragraphs[0].font.name = "Roboto"
    h7.text_frame.paragraphs[0].font.size = Pt(28)
    h7.text_frame.paragraphs[0].font.bold = True
    h7.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(PRIMARY)
    h7.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    # –°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ 3√ó3
    managers = list(period_data.values())
    for i, mgr in enumerate(managers[:9]):
        col, row = i % 3, i // 3
        x = margin + col * Inches(4.2)
        y = Inches(1.5) + row * Inches(1.9)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ü–≤–µ—Ç–æ–º –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        card = s7.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, x, y, Inches(3.9), Inches(1.7))
        eff = (mgr.calls_percentage + mgr.leads_volume_percentage) / 2
        if eff >= 80:
            card.fill.solid()
            card.fill.fore_color.rgb = hex_to_rgb(PRIMARY)
        elif eff >= 60:
            card.fill.solid()
            card.fill.fore_color.rgb = hex_to_rgb("#FF9800")
        else:
            card.fill.solid()
            card.fill.fore_color.rgb = hex_to_rgb(ALERT)
        card.line.fill.background()
        
        # –ò–º—è
        name_box = s7.shapes.add_textbox(x + Inches(0.2), y + Inches(0.2), Inches(3.5), Inches(0.5))
        name_box.text_frame.text = mgr.name
        name_box.text_frame.paragraphs[0].font.name = "Roboto"
        name_box.text_frame.paragraphs[0].font.size = Pt(14)
        name_box.text_frame.paragraphs[0].font.bold = True
        name_box.text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)
        name_box.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        stats = f"üìû {mgr.calls_fact} ‚Ä¢ üìù {mgr.leads_units_fact} ‚Ä¢ üí∞ {mgr.leads_volume_fact:.1f}".replace(".", ",")
        stats_box = s7.shapes.add_textbox(x + Inches(0.2), y + Inches(0.8), Inches(3.5), Inches(0.7))
        stats_box.text_frame.text = stats
        stats_box.text_frame.paragraphs[0].font.name = "Roboto"
        stats_box.text_frame.paragraphs[0].font.size = Pt(12)
        stats_box.text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)
        stats_box.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    # === 8. –î–ò–ù–ê–ú–ò–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ú–ï–¢–†–ò–ö ===
    print("  –°–ª–∞–π–¥ 8/9: –î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Ç—Ä–∏–∫...")
    s8 = prs.slides.add_slide(prs.slide_layouts[6])
    bg8 = s8.shapes.add_shape(MSO_SHAPE.RECTANGLE, 0, 0, prs.slide_width, prs.slide_height)
    bg8.fill.solid()
    bg8.fill.fore_color.rgb = hex_to_rgb(SLIDE_BG)
    bg8.line.fill.background()
    add_logo(s8, prs, logo)
    
    h8 = s8.shapes.add_textbox(margin, Inches(0.5), prs.slide_width - 2*margin, Inches(0.6))
    h8.text_frame.text = "–î–∏–Ω–∞–º–∏–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"
    h8.text_frame.paragraphs[0].font.name = "Roboto"
    h8.text_frame.paragraphs[0].font.size = Pt(28)
    h8.text_frame.paragraphs[0].font.bold = True
    h8.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(PRIMARY)
    h8.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏
    if os.path.exists(line_path):
        s8.shapes.add_picture(line_path, Inches(2), Inches(1.5), width=Inches(9), height=Inches(5))
    
    # === 9. –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò AI ===
    print("  –°–ª–∞–π–¥ 9/9: –ò—Ç–æ–≥–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    s9 = prs.slides.add_slide(prs.slide_layouts[6])
    bg9 = s9.shapes.add_shape(MSO_SHAPE.RECTANGLE, 0, 0, prs.slide_width, prs.slide_height)
    bg9.fill.solid()
    bg9.fill.fore_color.rgb = hex_to_rgb(SLIDE_BG)
    bg9.line.fill.background()
    add_logo(s9, prs, logo)
    
    h9 = s9.shapes.add_textbox(margin, Inches(0.5), prs.slide_width - 2*margin, Inches(0.6))
    h9.text_frame.text = "–í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    h9.text_frame.paragraphs[0].font.name = "Roboto"
    h9.text_frame.paragraphs[0].font.size = Pt(28)
    h9.text_frame.paragraphs[0].font.bold = True
    h9.text_frame.paragraphs[0].font.color.rgb = hex_to_rgb(PRIMARY)
    h9.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    # AI –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    final_ai = __import__("asyncio").get_event_loop().run_until_complete(
        YandexGPTService(settings).generate_team_comment(totals, f"–ò—Ç–æ–≥–∏ {period_name}")
    )
    final_box = s9.shapes.add_textbox(margin, Inches(1.5), prs.slide_width - 2*margin, Inches(5))
    final_box.text_frame.text = f"üéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n\n{final_ai}\n\nüìå –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:\n‚Ä¢ –£—Å–∏–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –æ—Ç—Å—Ç–∞—é—â–∏–º–∏\n‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\n‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã"
    final_box.text_frame.word_wrap = True
    for p in final_box.text_frame.paragraphs:
        p.font.name = "Roboto"
        p.font.size = Pt(16)
        p.font.color.rgb = hex_to_rgb(TEXT_MAIN)
        p.line_spacing = 1.3
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    out = f"brief_compliant_{start.strftime('%Y%m%d')}_{end.strftime('%Y%m%d')}.pptx"
    prs.save(out)
    print(f"\n‚úÖ –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–Ø –ü–û –ë–†–ò–§–£: {out}")
    print("–í–∫–ª—é—á–µ–Ω–æ: 9 —Å–ª–∞–π–¥–æ–≤, —Ç–æ—á–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞, –∑–µ–±—Ä–∞-—Ç–∞–±–ª–∏—Ü—ã, donut/bar/line, AI-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –≤—Å–µ—Ö")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
